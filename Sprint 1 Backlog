Design App Activities and Flow
  -Prototype Design A
    --Complete LaunchActivity
      ---Design ListView XML
      ---Code ListAdapter
      ---Design LaunchAppActivity XML
      ---Implement search-for-app tool
      ---Implement Confirm Selection Dialog
      ---Implement Launch of Recording Task
      ---Implement Intent creation for EndRecordActivity

    --Complete EndRecordActivity
      ---Design EndRecordActivity XML
      ---Implement functionality to save descriptions
        ----Description TextEdit & Benchmark Button
      ---Implement Stop Recording Button
        ----Stops Record Task
        ----Starts Intent for SubmitReportActivity

    --Complete SubmitReportActivity
      ---Design SubmitReportActivity XML
      ---Implement Reporter Name TextEdit
      ---Implement Report Description TextEdit
      ---Implement Report Title TextEdit
      ---Implement Submit Report Button
        ----Pulls Data from TextEdits, saving it to BugReport
        ----Sends Report to Server

  -Present Prototype to Client
    --Gather observations
    --Refine requirements

Write BugReport Class
  **This class contains the data for the final report
  **Is a Singleton; can only create one bug report at a time

  -Write functions for storing new data
    --addUserEvent(Event e)
      ---Records the event, stores in a list
      ---Increments the event counter
    --addSensorData(Sensor s, Data d)
      ---Adds the data point to the list corresponding to s
      ---data should include a timestamp
    --addScreenshot(Screenshot s)
      ---adds capture to a list with the benchmark counter
    --addBenchmarkDescription(String s)
      ---adds entry for the description with the benchmark counter
    --addTitle(String s)
      ---sets the report title to s
    --addReporter(String s)
      ---sets the reporter name to s

  -Write Getters

  -Write toJSON() function
    --Returns the data in the BugReport as a .JSON file

Write Data-Collection Asynchronous Task
  **Uses BugReport class to store data
  **Queries sensor data periodically and listens for user events
  -Write userEventListener
    --listens for user events from Accessibility Services
    --calls addUserEvent() in BugReport class on event
    --takes a screenshot and calls addScreenshot() in ...

  -Write logSensors() function
    --gathers sensor data periodically and calls addSensorData()

Test functionality
  -Black-Box testing of functionality
    --Does the app appear to work?
    --Are the XMLs properly displayed
  -Write white-box tests for tasks
    --ensure data collection is accurate
    --ensure BugReport class is functional

User Stories
  -Generating a Report
    As a user, I can view a list of installed applications on my device. (Sprint1 : 3 hours)
    As a user, I can narrow the list of installed applications with a search bar. (Sprint1 : 30 minutes)
    As a user, I can select an application from the list to start a bug report. (Sprint1 : 30 minutes)
    As a user, I can input the appropriate steps to reproduce the bug. (Sprint1 : 2 hours)
    As a user, I can pause and start recording at will. (Sprint1 : 5 minutes)
    As a user, I can add a title and description to my report. (Sprint1 : 1 hour)
    As a user, I can submit my report. (Sprint1 : 30 minutes)
  -Reviewing a Report
    As a user, I can review the steps I inputted for the report. (Sprint1 : 30 minutes)
    As a developer, I can review the steps the user inputted for the report. (Sprint1: 5 hours)
    As a developer, I can review detailed sensor traces from the report. (Sprint1: 0 minutes)
    As a developer, I can replay the inputs the user did in their report on my own device/emulator. (Sprint1: 0 minutes)
